name: Branch Build CE

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: "Type of build to run"
        required: true
        type: choice
        default: "Build"
        options:
          - "Build"
          - "Release"
      releaseVersion:
        description: "Release Version"
        type: string
        default: v0.0.0
      isPrerelease:
        description: "Is Pre-release"
        type: boolean
        default: false
        required: true
      arm64:
        description: "Build for ARM64 architecture"
        required: false
        default: false
        type: boolean

env:
  TARGET_BRANCH: ${{ github.ref_name }}
  ARM64_BUILD: ${{ github.event.inputs.arm64 }}
  BUILD_TYPE: ${{ github.event.inputs.build_type }}
  RELEASE_VERSION: ${{ github.event.inputs.releaseVersion }}
  IS_PRERELEASE: ${{ github.event.inputs.isPrerelease }}

jobs:
  branch_build_setup:
    name: Build Setup
    runs-on: ubuntu-22.04
    outputs:
      gh_branch_name: ${{ steps.set_env_variables.outputs.TARGET_BRANCH }}
      gh_buildx_driver: ${{ steps.set_env_variables.outputs.BUILDX_DRIVER }}
      gh_buildx_version: ${{ steps.set_env_variables.outputs.BUILDX_VERSION }}
      gh_buildx_platforms: ${{ steps.set_env_variables.outputs.BUILDX_PLATFORMS }}
      gh_buildx_endpoint: ${{ steps.set_env_variables.outputs.BUILDX_ENDPOINT }}
      build_proxy: ${{ steps.changed_files.outputs.proxy_any_changed }}
      build_apiserver: ${{ steps.changed_files.outputs.apiserver_any_changed }}
      build_admin: ${{ steps.changed_files.outputs.admin_any_changed }}
      build_space: ${{ steps.changed_files.outputs.space_any_changed }}
      build_web: ${{ steps.changed_files.outputs.web_any_changed }}
      build_live: ${{ steps.changed_files.outputs.live_any_changed }}

      dh_img_web: ${{ steps.set_env_variables.outputs.DH_IMG_WEB }}
      dh_img_space: ${{ steps.set_env_variables.outputs.DH_IMG_SPACE }}
      dh_img_admin: ${{ steps.set_env_variables.outputs.DH_IMG_ADMIN }}
      dh_img_live: ${{ steps.set_env_variables.outputs.DH_IMG_LIVE }}
      dh_img_backend: ${{ steps.set_env_variables.outputs.DH_IMG_BACKEND }}
      dh_img_proxy: ${{ steps.set_env_variables.outputs.DH_IMG_PROXY }}

      build_type: ${{steps.set_env_variables.outputs.BUILD_TYPE}}
      build_release: ${{ steps.set_env_variables.outputs.BUILD_RELEASE }}
      build_prerelease: ${{ steps.set_env_variables.outputs.BUILD_PRERELEASE }}
      release_version: ${{ steps.set_env_variables.outputs.RELEASE_VERSION }}

    steps:
      - id: set_env_variables
        name: Set Environment Variables
        run: |
          if [ "${{ env.TARGET_BRANCH }}" == "master" ] || [ "${{ env.ARM64_BUILD }}" == "true" ] || ([ "${{ github.event_name }}" == "release" ] && [ "${{ env.IS_PRERELEASE }}" != "true" ]); then
            echo "BUILDX_DRIVER=docker-container" >> $GITHUB_OUTPUT
            echo "BUILDX_VERSION=latest" >> $GITHUB_OUTPUT
            echo "BUILDX_PLATFORMS=linux/amd64,linux/arm64" >> $GITHUB_OUTPUT
            echo "BUILDX_ENDPOINT=" >> $GITHUB_OUTPUT
          else
            echo "BUILDX_DRIVER=docker-container" >> $GITHUB_OUTPUT
            echo "BUILDX_VERSION=latest" >> $GITHUB_OUTPUT
            echo "BUILDX_PLATFORMS=linux/amd64" >> $GITHUB_OUTPUT
            echo "BUILDX_ENDPOINT=" >> $GITHUB_OUTPUT
          fi
          BR_NAME=$( echo "${{ env.TARGET_BRANCH }}" |sed 's/[^a-zA-Z0-9.-]//g')
          echo "TARGET_BRANCH=$BR_NAME" >> $GITHUB_OUTPUT

          echo "DH_IMG_WEB=plane-frontend" >> $GITHUB_OUTPUT
          echo "DH_IMG_SPACE=plane-space" >> $GITHUB_OUTPUT
          echo "DH_IMG_ADMIN=plane-admin" >> $GITHUB_OUTPUT
          echo "DH_IMG_LIVE=plane-live" >> $GITHUB_OUTPUT
          echo "DH_IMG_BACKEND=plane-backend" >> $GITHUB_OUTPUT
          echo "DH_IMG_PROXY=plane-proxy" >> $GITHUB_OUTPUT

          echo "BUILD_TYPE=${{env.BUILD_TYPE}}" >> $GITHUB_OUTPUT
          BUILD_RELEASE=false
          BUILD_PRERELEASE=false
          RELVERSION="latest"

          if [ "${{ env.BUILD_TYPE }}" == "Release" ]; then
            FLAT_RELEASE_VERSION=$(echo "${{ env.RELEASE_VERSION }}" | sed 's/[^a-zA-Z0-9.-]//g')
            echo "FLAT_RELEASE_VERSION=${FLAT_RELEASE_VERSION}" >> $GITHUB_OUTPUT

            semver_regex="^v([0-9]+)\.([0-9]+)\.([0-9]+)(-[a-zA-Z0-9]+(-[a-zA-Z0-9]+)*)?$"
            if [[ ! $FLAT_RELEASE_VERSION =~ $semver_regex ]]; then
              echo "Invalid Release Version Format : $FLAT_RELEASE_VERSION"
              echo "Please provide a valid SemVer version"
              echo "e.g. v1.2.3 or v1.2.3-alpha-1"
              echo "Exiting the build process"
              exit 1  # Exit with status 1 to fail the step
            fi
            BUILD_RELEASE=true
            RELVERSION=$FLAT_RELEASE_VERSION

            if [ "${{ env.IS_PRERELEASE }}" == "true" ]; then
              BUILD_PRERELEASE=true
            fi
          fi
          echo "BUILD_RELEASE=${BUILD_RELEASE}" >> $GITHUB_OUTPUT
          echo "BUILD_PRERELEASE=${BUILD_PRERELEASE}" >> $GITHUB_OUTPUT
          echo "RELEASE_VERSION=${RELVERSION}" >> $GITHUB_OUTPUT

      - id: checkout_files
        name: Checkout Files
        uses: actions/checkout@v4

      - name: Get changed files
        id: changed_files
        uses: tj-actions/changed-files@v42
        with:
          files_yaml: |
            apiserver:
              - apiserver/**
            proxy:
              - nginx/**
            admin:
              - admin/**
              - packages/**
              - "package.json"
              - "yarn.lock"
              - "tsconfig.json"
              - "turbo.json"
            space:
              - space/**
              - packages/**
              - "package.json"
              - "yarn.lock"
              - "tsconfig.json"
              - "turbo.json"
            web:
              - web/**
              - packages/**
              - "package.json"
              - "yarn.lock"
              - "tsconfig.json"
              - "turbo.json"
            live:
              - live/**
              - packages/**
              - 'package.json'
              - 'yarn.lock'
              - 'tsconfig.json'
              - 'turbo.json'

  branch_build_push_web:
    if: ${{ (needs.branch_build_setup.outputs.build_web == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'release' || needs.branch_build_setup.outputs.gh_branch_name == 'master') && !contains(needs.branch_build_setup.outputs.gh_buildx_platforms, 'linux/arm64') }}
    name: Build-Push Web Docker Image
    runs-on: ubuntu-20.04
    needs: [branch_build_setup]
    env:
      FRONTEND_TAG: ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-frontend:${{ needs.branch_build_setup.outputs.flat_branch_name }}
      TARGET_BRANCH: ${{ needs.branch_build_setup.outputs.gh_branch_name }}
      BUILDX_DRIVER: ${{ needs.branch_build_setup.outputs.gh_buildx_driver }}
      BUILDX_VERSION: ${{ needs.branch_build_setup.outputs.gh_buildx_version }}
      BUILDX_PLATFORMS: ${{ needs.branch_build_setup.outputs.gh_buildx_platforms }}
      BUILDX_ENDPOINT: ${{ needs.branch_build_setup.outputs.gh_buildx_endpoint }}
    steps:
      - name: Set Frontend Docker Tag
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            TAG=${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-frontend:${{ github.event.release.tag_name }}
            if [ "${{ env.IS_PRERELEASE }}" != "true" ]; then
              TAG=${TAG},${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-frontend:stable
            fi
          elif [ "${{ env.TARGET_BRANCH }}" == "master" ]; then
            TAG=${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-frontend:latest
          else
            TAG=${{ env.FRONTEND_TAG }}
          fi
          echo "FRONTEND_TAG=${TAG}" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: ${{ env.BUILDX_DRIVER }}
          version: ${{ env.BUILDX_VERSION }}
          endpoint: ${{ env.BUILDX_ENDPOINT }}

      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Build and Push Frontend to Docker Container Registry
        uses: docker/build-push-action@v5.1.0
        with:
          context: .
          file: ./web/Dockerfile.web
          platforms: ${{ env.BUILDX_PLATFORMS }}
          tags: ${{ env.FRONTEND_TAG }}
          push: true
        env:
          DOCKER_BUILDKIT: 1
          DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}

  branch_build_web_amd64:
    runs-on: ubuntu-20.04
    if: ${{ contains(needs.branch_build_setup.outputs.gh_buildx_platforms, 'linux/arm64') }}
    needs: [branch_build_setup]
    env:
      FRONTEND_TAG: ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-frontend-amd64:${{ needs.branch_build_setup.outputs.gh_branch_name }}
      TARGET_BRANCH: ${{ needs.branch_build_setup.outputs.gh_branch_name }}
      BUILDX_DRIVER: ${{ needs.branch_build_setup.outputs.gh_buildx_driver }}
      BUILDX_VERSION: ${{ needs.branch_build_setup.outputs.gh_buildx_version }}
      BUILDX_PLATFORMS: 'linux/amd64'
      BUILDX_ENDPOINT: ${{ needs.branch_build_setup.outputs.gh_buildx_endpoint }}
    steps:
      - name: Set Frontend Docker Tag
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            TAG=${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-frontend-amd64:${{ github.event.release.tag_name }}
            if [ "${{ env.IS_PRERELEASE }}" != "true" ]; then
              TAG=${TAG},${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-frontend-amd64:stable
            fi
          elif [ "${{ env.TARGET_BRANCH }}" == "master" ]; then
            TAG=${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-frontend-amd64:latest
          else
            TAG=${{ env.FRONTEND_TAG }}
          fi
          echo "FRONTEND_TAG=${TAG}" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: ${{ env.BUILDX_DRIVER }}
          version: ${{ env.BUILDX_VERSION }}
          endpoint: ${{ env.BUILDX_ENDPOINT }}

      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Build and Push Frontend to Docker Container Registry
        uses: docker/build-push-action@v5.1.0
        with:
          context: .
          file: ./web/Dockerfile.web
          platforms: ${{ env.BUILDX_PLATFORMS }}
          tags: ${{ env.FRONTEND_TAG }}
          push: true
        env:
          DOCKER_BUILDKIT: 1
          DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}

  branch_build_web_arm64:
    runs-on: [self-hosted, linux, ARM64]
    if: ${{ contains(needs.branch_build_setup.outputs.gh_buildx_platforms, 'linux/arm64') }}
    needs: [branch_build_setup]
    env:
      FRONTEND_TAG: ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-frontend-arm64:${{ needs.branch_build_setup.outputs.gh_branch_name }}
      TARGET_BRANCH: ${{ needs.branch_build_setup.outputs.gh_branch_name }}
      BUILDX_DRIVER: ${{ needs.branch_build_setup.outputs.gh_buildx_driver }}
      BUILDX_VERSION: ${{ needs.branch_build_setup.outputs.gh_buildx_version }}
      BUILDX_PLATFORMS: 'linux/arm64'
      BUILDX_ENDPOINT: ${{ needs.branch_build_setup.outputs.gh_buildx_endpoint }}
    steps:
      - name: Set Frontend Docker Tag
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            TAG=${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-frontend-arm64:${{ github.event.release.tag_name }}
            if [ "${{ env.IS_PRERELEASE }}" != "true" ]; then
              TAG=${TAG},${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-frontend-arm64:stable
            fi
          elif [ "${{ env.TARGET_BRANCH }}" == "master" ]; then
            TAG=${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-frontend-arm64:latest
          else
            TAG=${{ env.FRONTEND_TAG }}
          fi
          echo "FRONTEND_TAG=${TAG}" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: ${{ env.BUILDX_DRIVER }}
          version: ${{ env.BUILDX_VERSION }}
          endpoint: ${{ env.BUILDX_ENDPOINT }}

      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Build and Push Frontend to Docker Container Registry
        uses: docker/build-push-action@v5.1.0
        with:
          context: .
          file: ./web/Dockerfile.web
          platforms: ${{ env.BUILDX_PLATFORMS }}
          tags: ${{ env.FRONTEND_TAG }}
          push: true
        env:
          DOCKER_BUILDKIT: 1
          DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}

  branch_push_web:
    runs-on: ubuntu-20.04
    needs: [branch_build_setup, branch_build_web_amd64, branch_build_web_arm64]
    if: ${{ contains(needs.branch_build_setup.outputs.gh_buildx_platforms, 'linux/arm64') }}
    env:
      FRONTEND_TAG: ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-frontend:${{ needs.branch_build_setup.outputs.gh_branch_name }}
      FRONTEND_TAG_AMD64: ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-frontend-amd64:${{ needs.branch_build_setup.outputs.gh_branch_name }}
      FRONTEND_TAG_ARM64: ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-frontend-arm64:${{ needs.branch_build_setup.outputs.gh_branch_name }}
      TARGET_BRANCH: ${{ needs.branch_build_setup.outputs.gh_branch_name }}
      BUILDX_DRIVER: ${{ needs.branch_build_setup.outputs.gh_buildx_driver }}
      BUILDX_VERSION: ${{ needs.branch_build_setup.outputs.gh_buildx_version }}
      BUILDX_PLATFORMS: 'linux/arm64'
      BUILDX_ENDPOINT: ${{ needs.branch_build_setup.outputs.gh_buildx_endpoint }}
    steps:
      - name: Set Frontend Docker Tag
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            TAG=${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-frontend
          elif [ "${{ env.TARGET_BRANCH }}" == "master" ]; then
            TAG=${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-frontend:latest
          else
            TAG=${{ env.FRONTEND_TAG }}
          fi
          echo "FRONTEND_TAG=${TAG}" >> $GITHUB_ENV

      - name: Set Frontend Docker Tag (AMD64)
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            TAG=${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-frontend-amd64:${{ github.event.release.tag_name }}
          elif [ "${{ env.TARGET_BRANCH }}" == "master" ]; then
            TAG=${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-frontend-amd64:latest
          else
            TAG=${{ env.FRONTEND_TAG_AMD64 }}
          fi
          echo "FRONTEND_TAG_AMD64=${TAG}" >> $GITHUB_ENV

      - name: Set Frontend Docker Tag (ARM64)
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            TAG=${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-frontend-arm64:${{ github.event.release.tag_name }}
          elif [ "${{ env.TARGET_BRANCH }}" == "master" ]; then
            TAG=${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-frontend-arm64:latest
          else
            TAG=${{ env.FRONTEND_TAG_ARM64 }}
          fi
          echo "FRONTEND_TAG_ARM64=${TAG}" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Frontend to Docker Container Registry (Release)
        uses: int128/docker-manifest-create-action@v2
        if: ${{ github.event_name == 'release' && env.IS_PRERELEASE != 'true' }}
        with:
          tags: |
            ${{ env.FRONTEND_TAG }}:stable
            ${{ env.FRONTEND_TAG }}:${{ github.event.release.tag_name }}
          sources: |
            ${{ env.FRONTEND_TAG_AMD64 }}
            ${{ env.FRONTEND_TAG_ARM64 }}
      
      - name: Push Frontend to Docker Container Registry (Pre-Release)
        uses: int128/docker-manifest-create-action@v2
        if: ${{ github.event_name == 'release' && env.IS_PRERELEASE == 'true' }}
        with:
          tags: |
            ${{ env.FRONTEND_TAG }}:${{ github.event.release.tag_name }}
          sources: |
            ${{ env.FRONTEND_TAG_AMD64 }}
            ${{ env.FRONTEND_TAG_ARM64 }}
          
      - name: Push Frontend to Docker Container Registry (Master)
        uses: int128/docker-manifest-create-action@v2
        if: ${{ env.TARGET_BRANCH == 'master' }}
        with:
          tags: |
            ${{ env.FRONTEND_TAG }}
          sources: |
            ${{ env.FRONTEND_TAG_AMD64 }}
            ${{ env.FRONTEND_TAG_ARM64 }}

      - name: Push Frontend to Docker Container Registry
        uses: int128/docker-manifest-create-action@v2
        if: ${{ github.event_name == 'release' || env.TARGET_BRANCH == 'master' }}
        with:
          tags: |
            ${{ env.FRONTEND_TAG }}
          sources: |
            ${{ env.FRONTEND_TAG_AMD64 }}
            ${{ env.FRONTEND_TAG_ARM64 }}

  branch_build_push_admin:
    if: ${{ needs.branch_build_setup.outputs.build_admin == 'true' || github.event_name == 'workflow_dispatch' || needs.branch_build_setup.outputs.gh_branch_name == 'master' }}
    name: Build-Push Admin Docker Image
    runs-on: ubuntu-22.04
    needs: [branch_build_setup]
    env:
      ADMIN_TAG: ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-admin:${{ needs.branch_build_setup.outputs.flat_branch_name }}
      TARGET_BRANCH: ${{ needs.branch_build_setup.outputs.gh_branch_name }}
      BUILDX_DRIVER: ${{ needs.branch_build_setup.outputs.gh_buildx_driver }}
      BUILDX_VERSION: ${{ needs.branch_build_setup.outputs.gh_buildx_version }}
      BUILDX_PLATFORMS: ${{ needs.branch_build_setup.outputs.gh_buildx_platforms }}
      BUILDX_ENDPOINT: ${{ needs.branch_build_setup.outputs.gh_buildx_endpoint }}
    steps:
      - name: Set Admin Docker Tag
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            TAG=${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-admin:${{ github.event.release.tag_name }}
            if [ "${{ env.IS_PRERELEASE }}" != "true" ]; then
              TAG=${TAG},${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-admin:stable
            fi
          elif [ "${{ env.TARGET_BRANCH }}" == "master" ]; then
            TAG=${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-admin:latest
          else
            TAG=${{ env.ADMIN_TAG }}
          fi
          echo "ADMIN_TAG=${TAG}" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

  branch_build_push_web:
    if: ${{ needs.branch_build_setup.outputs.build_web == 'true' || github.event_name == 'workflow_dispatch' || needs.branch_build_setup.outputs.gh_branch_name == 'master' }}
    name: Build-Push Web Docker Image
    runs-on: ubuntu-22.04
    needs: [branch_build_setup]
    steps:
      - name: Web Build and Push
        uses: makeplane/actions/build-push@v1.0.0
        with:
          build-release: ${{ needs.branch_build_setup.outputs.build_release }}
          build-prerelease: ${{ needs.branch_build_setup.outputs.build_prerelease }}
          release-version: ${{ needs.branch_build_setup.outputs.release_version }}
          dockerhub-username: ${{ secrets.DOCKERHUB_USERNAME }}
          dockerhub-token: ${{ secrets.DOCKERHUB_TOKEN }}
          docker-image-owner: makeplane
          docker-image-name: ${{ needs.branch_build_setup.outputs.dh_img_web }}
          build-context: .
          dockerfile-path: ./web/Dockerfile.web
          buildx-driver: ${{ needs.branch_build_setup.outputs.gh_buildx_driver }}
          buildx-version: ${{ needs.branch_build_setup.outputs.gh_buildx_version }}
          buildx-platforms: ${{ needs.branch_build_setup.outputs.gh_buildx_platforms }}
          buildx-endpoint: ${{ needs.branch_build_setup.outputs.gh_buildx_endpoint }}

  branch_build_push_space:
    if: ${{ needs.branch_build_setup.outputs.build_space == 'true' || github.event_name == 'workflow_dispatch' || needs.branch_build_setup.outputs.gh_branch_name == 'master' }}
    name: Build-Push Space Docker Image
    runs-on: ubuntu-22.04
    needs: [branch_build_setup]
    env:
      SPACE_TAG: ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-space:${{ needs.branch_build_setup.outputs.flat_branch_name }}
      TARGET_BRANCH: ${{ needs.branch_build_setup.outputs.gh_branch_name }}
      BUILDX_DRIVER: ${{ needs.branch_build_setup.outputs.gh_buildx_driver }}
      BUILDX_VERSION: ${{ needs.branch_build_setup.outputs.gh_buildx_version }}
      BUILDX_PLATFORMS: ${{ needs.branch_build_setup.outputs.gh_buildx_platforms }}
      BUILDX_ENDPOINT: ${{ needs.branch_build_setup.outputs.gh_buildx_endpoint }}
    steps:
      - name: Set Space Docker Tag
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            TAG=${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-space:${{ github.event.release.tag_name }}
            if [ "${{ env.IS_PRERELEASE }}" != "true" ]; then
              TAG=${TAG},${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-space:stable
            fi
          elif [ "${{ env.TARGET_BRANCH }}" == "master" ]; then
            TAG=${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-space:latest
          else
            TAG=${{ env.SPACE_TAG }}
          fi
          echo "SPACE_TAG=${TAG}" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: ${{ env.BUILDX_DRIVER }}
          version: ${{ env.BUILDX_VERSION }}
          endpoint: ${{ env.BUILDX_ENDPOINT }}

      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Build and Push Space to Docker Hub
        uses: docker/build-push-action@v5.1.0
        with:
          context: .
          file: ./space/Dockerfile.space
          platforms: ${{ env.BUILDX_PLATFORMS }}
          tags: ${{ env.SPACE_TAG }}
          push: true
        env:
          DOCKER_BUILDKIT: 1
          DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}

  branch_build_push_apiserver:
    if: ${{ needs.branch_build_setup.outputs.build_apiserver == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'release' || needs.branch_build_setup.outputs.gh_branch_name == 'master' }}
    name: Build-Push API Server Docker Image
    runs-on: ubuntu-20.04
    needs: [branch_build_setup]
    env:
      BACKEND_TAG: ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-backend:${{ needs.branch_build_setup.outputs.flat_branch_name }}
      TARGET_BRANCH: ${{ needs.branch_build_setup.outputs.gh_branch_name }}
      BUILDX_DRIVER: ${{ needs.branch_build_setup.outputs.gh_buildx_driver }}
      BUILDX_VERSION: ${{ needs.branch_build_setup.outputs.gh_buildx_version }}
      BUILDX_PLATFORMS: ${{ needs.branch_build_setup.outputs.gh_buildx_platforms }}
      BUILDX_ENDPOINT: ${{ needs.branch_build_setup.outputs.gh_buildx_endpoint }}
    steps:
      - name: Set Backend Docker Tag
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            TAG=${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-backend:${{ github.event.release.tag_name }}
            if [ "${{ env.IS_PRERELEASE }}" != "true" ]; then
              TAG=${TAG},${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-backend:stable
            fi
          elif [ "${{ env.TARGET_BRANCH }}" == "master" ]; then
            TAG=${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-backend:latest
          else
            TAG=${{ env.BACKEND_TAG }}
          fi
          echo "BACKEND_TAG=${TAG}" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: ${{ env.BUILDX_DRIVER }}
          version: ${{ env.BUILDX_VERSION }}
          endpoint: ${{ env.BUILDX_ENDPOINT }}

      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Build and Push Backend to Docker Hub
        uses: docker/build-push-action@v5.1.0
        with:
          context: ./apiserver
          file: ./apiserver/Dockerfile.api
          platforms: ${{ env.BUILDX_PLATFORMS }}
          push: true
          tags: ${{ env.BACKEND_TAG }}
        env:
          DOCKER_BUILDKIT: 1
          DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}

  branch_build_push_live:
    if: ${{ needs.branch_build_setup.outputs.build_live == 'true' || github.event_name == 'workflow_dispatch' || needs.branch_build_setup.outputs.gh_branch_name == 'master' }}
    name: Build-Push Live Collaboration Docker Image
    runs-on: ubuntu-22.04
    needs: [branch_build_setup]
    env:
      LIVE_TAG: ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-live:${{ needs.branch_build_setup.outputs.flat_branch_name }}
      TARGET_BRANCH: ${{ needs.branch_build_setup.outputs.gh_branch_name }}
      BUILDX_DRIVER: ${{ needs.branch_build_setup.outputs.gh_buildx_driver }}
      BUILDX_VERSION: ${{ needs.branch_build_setup.outputs.gh_buildx_version }}
      BUILDX_PLATFORMS: ${{ needs.branch_build_setup.outputs.gh_buildx_platforms }}
      BUILDX_ENDPOINT: ${{ needs.branch_build_setup.outputs.gh_buildx_endpoint }}
    steps:
      - name: Set Live Docker Tag
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            TAG=${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-live:${{ github.event.release.tag_name }}
            if [ "${{ github.event.release.prerelease }}" != "true" ]; then
              TAG=${TAG},${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-live:stable
            fi
          elif [ "${{ env.TARGET_BRANCH }}" == "master" ]; then
            TAG=${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-live:latest
          else
            TAG=${{ env.LIVE_TAG }}
          fi
          echo "LIVE_TAG=${TAG}" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

  branch_build_push_apiserver:
    if: ${{ needs.branch_build_setup.outputs.build_apiserver == 'true' || github.event_name == 'workflow_dispatch' || needs.branch_build_setup.outputs.gh_branch_name == 'master' }}
    name: Build-Push API Server Docker Image
    runs-on: ubuntu-22.04
    needs: [branch_build_setup]
    steps:
      - name: Backend Build and Push
        uses: makeplane/actions/build-push@v1.0.0
        with:
          build-release: ${{ needs.branch_build_setup.outputs.build_release }}
          build-prerelease: ${{ needs.branch_build_setup.outputs.build_prerelease }}
          release-version: ${{ needs.branch_build_setup.outputs.release_version }}
          dockerhub-username: ${{ secrets.DOCKERHUB_USERNAME }}
          dockerhub-token: ${{ secrets.DOCKERHUB_TOKEN }}
          docker-image-owner: makeplane
          docker-image-name: ${{ needs.branch_build_setup.outputs.dh_img_backend }}
          build-context: ./apiserver
          dockerfile-path: ./apiserver/Dockerfile.api
          buildx-driver: ${{ needs.branch_build_setup.outputs.gh_buildx_driver }}
          buildx-version: ${{ needs.branch_build_setup.outputs.gh_buildx_version }}
          buildx-platforms: ${{ needs.branch_build_setup.outputs.gh_buildx_platforms }}
          buildx-endpoint: ${{ needs.branch_build_setup.outputs.gh_buildx_endpoint }}

  branch_build_push_proxy:
    if: ${{ needs.branch_build_setup.outputs.build_proxy == 'true' || github.event_name == 'workflow_dispatch' || needs.branch_build_setup.outputs.gh_branch_name == 'master' }}
    name: Build-Push Proxy Docker Image
    runs-on: ubuntu-22.04
    needs: [branch_build_setup]
    env:
      PROXY_TAG: ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-proxy:${{ needs.branch_build_setup.outputs.flat_branch_name }}
      TARGET_BRANCH: ${{ needs.branch_build_setup.outputs.gh_branch_name }}
      BUILDX_DRIVER: ${{ needs.branch_build_setup.outputs.gh_buildx_driver }}
      BUILDX_VERSION: ${{ needs.branch_build_setup.outputs.gh_buildx_version }}
      BUILDX_PLATFORMS: ${{ needs.branch_build_setup.outputs.gh_buildx_platforms }}
      BUILDX_ENDPOINT: ${{ needs.branch_build_setup.outputs.gh_buildx_endpoint }}
    steps:
      - name: Set Proxy Docker Tag
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            TAG=${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-proxy:${{ github.event.release.tag_name }}
            if [ "${{ env.IS_PRERELEASE }}" != "true" ]; then
              TAG=${TAG},${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-proxy:stable
            fi
          elif [ "${{ env.TARGET_BRANCH }}" == "master" ]; then
            TAG=${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}/plane-proxy:latest
          else
            TAG=${{ env.PROXY_TAG }}
          fi
          echo "PROXY_TAG=${TAG}" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

  attach_assets_to_build:
    if: ${{ needs.branch_build_setup.outputs.build_type == 'Release' }}
    name: Attach Assets to Release
    runs-on: ubuntu-22.04
    needs: [branch_build_setup]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update Assets
        run: |
          cp ./deploy/selfhost/install.sh deploy/selfhost/setup.sh

      - name: Attach Assets
        id: attach_assets
        uses: actions/upload-artifact@v4
        with:
          name: selfhost-assets
          retention-days: 2
          path: |
            ${{ github.workspace }}/deploy/selfhost/setup.sh
            ${{ github.workspace }}/deploy/selfhost/restore.sh
            ${{ github.workspace }}/deploy/selfhost/docker-compose.yml
            ${{ github.workspace }}/deploy/selfhost/variables.env

  publish_release:
    if: ${{ needs.branch_build_setup.outputs.build_type == 'Release' }}
    name: Build Release
    runs-on: ubuntu-22.04
    needs:
      [
        branch_build_setup,
        branch_build_push_admin,
        branch_build_push_web,
        branch_build_push_space,
        branch_build_push_live,
        branch_build_push_apiserver,
        branch_build_push_proxy,
        attach_assets_to_build,
      ]
    env:
      REL_VERSION: ${{ needs.branch_build_setup.outputs.release_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update Assets
        run: |
          cp ./deploy/selfhost/install.sh deploy/selfhost/setup.sh

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.REL_VERSION }}
          name: ${{ env.REL_VERSION }}
          draft: false
          prerelease: ${{ env.IS_PRERELEASE }}
          generate_release_notes: true
          files: |
            ${{ github.workspace }}/deploy/selfhost/setup.sh
            ${{ github.workspace }}/deploy/selfhost/restore.sh
            ${{ github.workspace }}/deploy/selfhost/docker-compose.yml
            ${{ github.workspace }}/deploy/selfhost/variables.env
